# 1. Выведите все символы из строки «Данная часть была посвящена больше синтаксису
# python и вопросам документации кода», значения индексов которых делятся на 2.
from typing import Any, List


def task_1(s: str) -> None:
    str_to_print = s[::2]
    print(str_to_print)


# 2. Выведите все символы из строки «Данная часть была посвящена больше синтаксису
# Python и вопросам документации кода», значения индексов которых без остатка делятся
# на 3, но не делятся на 4.
def task_2(s: str) -> None:
    str_to_print = [s[i] if i % 3 == 0 and i % 4 != 0 else "" for i in range(len(s))]
    str_to_print = "".join(str_to_print)
    print(str_to_print)


# 3. Выведите все символы из строки «Данная часть была посвящена больше синтаксису
# Python и вопросам документации кода», значения индексов которых при делении на 6 дают
# остаток 2, 4, и 5.
def task_3(s: str) -> None:
    str_to_print = [s[i] if i % 6 in [2, 4, 5] else "" for i in range(len(s))]
    str_to_print = "".join(str_to_print)
    print(str_to_print)


# 4. Выведите числа из диапазона от 1 до 10, используя цикл for и while.
def task_4_for(count: int) -> None:
    for i in range(1, count + 1):
        print(f"{i} ", end="")
    print()


def task_4_while(count: int) -> None:
    counter = 1
    while counter <= count:
        print(f"{counter} ", end="")
        counter += 1
    print()


# 5. Выведите числа из диапазона от –20 до 20 с шагом 3, используя цикл for и while.
def task_5(start: int, end: int, step: int) -> None:
    for i in range(start, end + 1, step):
        print(f"{i} ", end="")
    print()


# 6. Посчитайте количество вхождений элемента со значением «3» в следующем списке:
# [3 0 1 3 0 4 3 3 4 56 6 1 3], используя цикл for, while и метод count.
def task_6_for(lst: list, elem: Any) -> int:
    count = 0
    for e in lst:
        count += 1 if e == elem else 0
    return count


def task_6_while(lst: list, elem: Any) -> int:
    count = 0
    counter = len(lst)
    while counter:
        counter -= 1
        if lst[counter] == elem:
            count += 1
    return count


def task_6_count(lst: list, elem: Any) -> int:
    return lst.count(elem)


# 7. Сформируйте список из элементов строки «список доступных атрибутов»,
# используя механизм списковых включений и цикл  for.
def task_7(s: str) -> list:
    return [c for c in s]


# 8. Сформируйте единичную матрицу N × N, используя механизм списковых включений.
def task_8(size: int) -> List[List]:
    return [[1 for _ in range(size)] for _ in range(size)]


# 9. Напишите программу, выводящую элементы списка [3 0 1 3 0 4 3 3 4 56 6 1 3]
# в обратной последовательности.
def task_9(lst: list) -> None:
    print(lst[::-1])


# 10. Напишите программу, которая выводит числе в диапазоне от 1 до 9, кроме 5 и 7.

# 11. Напишите программу, выводящую сумму элементов списка [3 0 1 3 0 4 3 3 4 56 6 1 3],
# используя цикл for, while и метод sum.

# 12. Напишите программу, выводящую сумму элементов списка [3 0 1 3 0 4 3 3 4 56 6 1 3],
# значения индексов которых делятся на без остатка на 3, используя цикл for и while.

# 13. Сформируйте список, значения элементов которого находятся в диапазоне от 23 до 35.

# 14. Сформируйте список, значения элементов которого находятся в диапазоне от 3 до 15
# с шагом 4.

# 15. Сформируйте список, значения элементов которого находятся в диапазоне от 3 до 25 и
# без остатка делятся на 3.

# 16. Сформируйте словарь из двух списков [3 0 1 3 0 4 3 3 4 56 6 1 3] и
# [2, 4, 7, 26, 33], используя встроенную функцию zip. Выведите словарь
# в консоль и объясните, почему он получился такого вида.

# 17. Выведите различными способами в консоль элементы списка
# [3 0 1 3 0 4 3 3 4 56 6 1 3] с их индексами.

# 18. Напишите программу, которая считывает целое число (месяц), после чего выводит
# сезон к которому этот месяц относится.

# 19. Напишите программу, выводящую среднее из трех значений.

# 20.	Напишите программу, выводящую таблицу умножения для задаваемого пользователем
# числа от 1 до 9 (включительно).

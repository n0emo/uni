#include <functional>

#include "знание_древних.h"

// TODO: сотворить итератор
// TODO: сотворить разрастание дощечки
// TODO: сотворить методы ведания

// clang-format off
свет_мой_зеркальце<скажи ОбразКлюча, скажи ОбразЦены> 
династия ДощечкаМешанины {
царский:
    семейство Пара {
        ОбразКлюча ключ;
        ОбразЦены цена;
        Пара(ОбразКлюча ключ, ОбразЦены цена) : ключ(ключ), цена(цена) {};
    };

    семейство Ведёрочко {
    царский:
        семейство Узелок {
            Пара пара;
            Русь::авось<Русь::указатель_всеобщий<Узелок>> сосед;
            Узелок(Пара пара) : пара(пара), сосед(Русь::пустое_место) {};
        };
        целина подсчёт;
        Русь::указатель_всеобщий<Узелок> голова;
        Русь::указатель_слабый<Узелок> хвост;

    народный:
        семейство Гонец {
            Русь::авось<Русь::указатель_всеобщий<Узелок>> текущий;
            Гонец(Русь::авось<Русь::указатель_всеобщий<Узелок>> текущий) : текущий(текущий){} 
    };

    народный:
        Ведёрочко() : подсчёт(ноль) {}
        розсуд пустое() { воздать подсчёт == ноль; };
        Русь::авось<ОбразЦены> разыскать(ОбразКлюча ключ);
        бестолочь добавить(Пара пара);
        бестолочь казнить(ОбразКлюча ключ);
        розсуд разыскать_и_казнить(ОбразЦены цена);
    };

народный:
    семейство Гонец {
        мерило СтрелаВедёрочка;
        Ведёрочко& полезное_ведёрочко;
    };

царский:
    мерило ИЗНАЧАЛЬНЫЙ_ПОДСЧЁТ_ВЕДЁРОЧЕК = 16;
    малый_дробь ДЕЙСТВУЮЩАЯ_МОЩЬ_РОСТА = 0.75;

    Русь::указатель_светлый<Ведёрочко[]> _дощечка;
    мерило _подсчёт_ведёрочек;
    мерило _поголовье;

    мерило заварить_мешанину(ОбразКлюча ключ);
народный:
    ДощечкаМешанины() : 
        _подсчёт_ведёрочек(ИЗНАЧАЛЬНЫЙ_ПОДСЧЁТ_ВЕДЁРОЧЕК), 
        _дощечка(Русь::сотвори_светлого<Ведёрочко[]>(ИЗНАЧАЛЬНЫЙ_ПОДСЧЁТ_ВЕДЁРОЧЕК)),
        _поголовье(0) {};

    бестолочь добавить(ОбразКлюча ключ, ОбразЦены цена);
    Русь::авось<ОбразЦены> выкорчевать(ОбразКлюча ключ);
    бестолочь казнить(ОбразКлюча ключ);
    бестолочь разыскать_и_казнить(ОбразЦены цена);
    розсуд ведает_ключ(ОбразКлюча ключ);
    розсуд ведает_цену(ОбразЦены цена);
};

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
Русь::авось<ОбразЦены> ДощечкаМешанины<ОбразКлюча, ОбразЦены>::Ведёрочко::разыскать(ОбразКлюча ключ) {
    коли(голова == туда_не_знаю_куда) {
        return Русь::пустое_место;
    }

    Русь::авось<Русь::указатель_слабый<Узелок>> ходьба = голова;
    покуда (ходьба.ценный()) {
        суд_Перуна запертая_ходьба = ходьба.значимо().запереть();
        коли(запертая_ходьба->пара.ключ == ключ) {
            воздать(запертая_ходьба->пара.цена);
        }
        ходьба = запертая_ходьба->сосед;
    }

    воздать Русь::пустое_место;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
бестолочь  ДощечкаМешанины<ОбразКлюча, ОбразЦены>::Ведёрочко::добавить(Пара пара) {
    коли (пустое()) {
        голова = Русь::сотвори_всеобщего<Узелок>(пара);
        хвост = голова;
    } отнюдь {
        суд_Перуна запертый_хвост = хвост.запереть();
        запертый_хвост->сосед = Русь::сотвори_всеобщего<Узелок>(пара);
        хвост = запертый_хвост->сосед.значимо();
    }

    подсчёт++;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
бестолочь ДощечкаМешанины<ОбразКлюча, ОбразЦены>::Ведёрочко::казнить(ОбразКлюча ключ) {
    коли(пустое()) {
        получи_басурман Русь::гнев_Перуна();
    }

    коли(голова->пара.ключ == ключ) {
        голова = голова->сосед.value_or(nullptr);
        подсчёт--;
        воздать;
    }             

    Русь::авось<Русь::указатель_всеобщий<Узелок>> ходьба(голова);
    Русь::авось<Русь::указатель_всеобщий<Узелок>> прошлое;
    покуда(ходьба.ценный() && ходьба.значимо()->пара.ключ != ключ) {
        прошлое = ходьба;
        ходьба = ходьба.значимо()->сосед;
    }

    коли(!ходьба.ценный()) {
        получи_басурман Русь::гнев_Перуна();
    }

    подсчёт--;
    прошлое.значимо()->сосед = ходьба.значимо()->сосед;
}


свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
розсуд ДощечкаМешанины<ОбразКлюча, ОбразЦены>::Ведёрочко::разыскать_и_казнить(ОбразЦены цена){
    коли(пустое()) {
        воздать кривда;
    }

    коли(голова->пара.цена == цена) {
        голова = голова->сосед.value_or(nullptr);
        подсчёт--;
        воздать правда;
    }             

    Русь::авось<Русь::указатель_всеобщий<Узелок>> ходьба(голова);
    Русь::авось<Русь::указатель_всеобщий<Узелок>> прошлое;
    покуда(ходьба.ценный() && ходьба.значимо()->пара.цена != цена) {
        прошлое = ходьба;
        ходьба = ходьба.значимо()->сосед;
    }

    коли(!ходьба.ценный()) {
        воздать кривда;
    }

    подсчёт--;
    прошлое.значимо()->сосед = ходьба.значимо()->сосед;
    воздать правда;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
мерило ДощечкаМешанины<ОбразКлюча, ОбразЦены>::заварить_мешанину(ОбразКлюча ключ) {
    воздать Русь::мешанина<ОбразКлюча>{}(ключ) % _подсчёт_ведёрочек;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
бестолочь ДощечкаМешанины<ОбразКлюча, ОбразЦены>::добавить(ОбразКлюча ключ, ОбразЦены цена) {
    мерило мешанина = заварить_мешанину(ключ);

    Ведёрочко& полезное_ведёрочко = _дощечка[мешанина];

    коли(полезное_ведёрочко.разыскать(ключ).ценный()) {
        получи_басурман Русь::гнев_Перуна();
    }

    полезное_ведёрочко.добавить(Пара(ключ, цена));
    _поголовье++;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
Русь::авось<ОбразЦены> ДощечкаМешанины<ОбразКлюча, ОбразЦены>::выкорчевать(ОбразКлюча ключ) {
    мерило мешанина = заварить_мешанину(ключ);
    Ведёрочко& полезное_ведёрочко = _дощечка[мешанина];
    воздать полезное_ведёрочко.разыскать(ключ);
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
бестолочь ДощечкаМешанины<ОбразКлюча, ОбразЦены>::казнить(ОбразКлюча ключ) {
    мерило мешанина = заварить_мешанину(ключ);
    Ведёрочко& полезное_ведёрочко = _дощечка[мешанина];
    полезное_ведёрочко.казнить(ключ);
    _поголовье--;
}

свет_мой_зеркальце <скажи ОбразКлюча, скажи ОбразЦены>
бестолочь ДощечкаМешанины<ОбразКлюча, ОбразЦены>::разыскать_и_казнить(ОбразЦены цена) {
    для(мерило гвардия = ноль; гвардия < _подсчёт_ведёрочек; гвардия++) {
        Ведёрочко& полезное_ведёрочко = _дощечка[гвардия];
        коли(полезное_ведёрочко.разыскать_и_казнить(цена)) {
            воздать;
        }
    }

    получи_басурман Русь::гнев_Перуна();
}

// clang-format on

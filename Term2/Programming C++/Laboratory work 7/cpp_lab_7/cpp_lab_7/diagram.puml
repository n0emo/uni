@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
'skinparam genericDisplay old

'
' Matrix
'

class matrix {
--fields--
    -m_matrix: vec2d
    -m_determinant: double
--methods--
..Operators..
    +operator[](index: int): Row

    +operator<<(os: ostream&, const matrix: Matrix&): ostream&
    +operator>>(is: istream&, matrix: Matrix&): istream&

    +operator==(const matrix_a: Matrix&, const matrix_b: Matrix& ): bool
    +operator!=(const matrix_a: Matrix&, const matrix_b: Matrix&): bool

    +operator+(const matrix_a: Matrix&, const matrix_b: Matrix&): Matrix
    +operator-(const matrix_a: Matrix&, const matrix_b: Matrix&): Matrix

    +operator*(const matrix: Matrix&, num: double): Matrix
    +operator*(num: double, const matrix: Matrix&): Matrix
    +operator*(const matrix_a: Matrix&, const matrix_b: Matrix&): Matrix

..Properties..
    +get_rows(): size_t
    +ge_cols(): size_t
    +get_determinant(): double
.. Private helper methods ..
    -{static} check_vec(const vec: vec2d&): bool
    -{static} get_prod_elem(vec_a: vec2d, vec_b: vec2d, row: int, col: int): double
    -eval_determinant(): double
}

class Row {
    +operator[](index: int): double
    -m_vec: std::vector<double>
}

matrix +-.- Row

'
' Matrix
'

'
' List
'

class list<T> {
--fields--
    -m_head: node*
    -m_tail: node*
    -m_size: size_t
--methods--
..basic..
    +size(): size_t 
    +is_empty(): bool
    +head(): T
    +tail(): T
    +operator[](index: size_t): T&
    +to_vector(): vector<T>
    +contains(val: T): bool
    +find(val: T): long long 
..adding..
    +push_back(data: T)
    +push_front(data: T)
    +insert(data: T, index: size_t)
..removing..
    +pop_back(): T
    +pop_front(): T
    +remove_at(index: size_t)
..functions..
    +transform(func: T(*)(arg: T))
    +foreach(func: void(*)(T arg))
..iterator..
    +begin(): iterator
    +end(): iterator
}

class node<T><<struct>>
{
    data: T
    next: node*
}

class iterator<T>
{
    +operator++(): iterator&
    +operator*(): T&
    +operator==(const other: iterator&): bool
    +operator!=(const other: iterator&): bool 

    -m_current: node*
}

list *-- node
list +-.- iterator

'
' List
'

'
' set
'

class set<T>
{
    +find(val: T): long long 
    +try_add(data: T): bool
    +try_delete(data: T): bool
    +ostream& operator<<(os: ostream&, const set: set&)
    +size(): size_t 

    -m_list: list<T>*
}

set *-- list

set o-- matrix

@enduml